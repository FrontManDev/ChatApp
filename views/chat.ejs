<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/chat.css">
  <title>Chat Application</title>
</head>
<body>
  <section class="content">
    <div class="users">
      <% users.forEach(user => { %>
        <div class="user" data-id="<%= user.id %>" data-name="<%= user.firstName %>">
          <div class="user-image">
            <% if (user.firstName) { %>
              <%= user.firstName[0] %>
            <% } else { %>
              ?
            <% } %>
          </div>
          <div class="user-info">
            <h3><%= user.firstName %></h3>
          </div>
        </div>
      <% }) %>
      <div class="log-out" id="log-out">
        Logout
      </div>
    </div>       
    <div class="chat">
      <div class="chat-messages" id="chat-messages">
      </div>
      <div class="chat-input">
        <input type="text" id="message-input" placeholder="Type a message...">
        <button id="send-button">➤</button>
      </div>
    </div>
  </section>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const token = localStorage.getItem('token');
    if(!token) {
      window.location.href = "/login";
    }
    
    const currentUser = JSON.parse(localStorage.getItem('current-user'));
    if (!currentUser) {
      window.location.href = "/login";
    }
    
    const socket = io();
    
    socket.emit('join', currentUser.id);
    
    const chatMessages = document.getElementById('chat-messages');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const logoutButton = document.getElementById('log-out');
    
    let selectedUserId = null;
    let selectedUserName = null;

    logoutButton.addEventListener('click', () => {
      localStorage.removeItem('token');
      localStorage.removeItem('current-user');
      window.location.href = "/login";
    });

    document.querySelectorAll('.user').forEach(user => {
      user.addEventListener('click', async () => {
        selectedUserId = user.getAttribute('data-id');
        selectedUserName = user.getAttribute('data-name');
        if (selectedUserName) {
          localStorage.setItem('SelectedUser', selectedUserName);
          document.title = `${currentUser.firstName} & ${selectedUserName}`;
          try {
            const response = await fetch(`/messages/${currentUser.id}/${selectedUserId}`);
            const messages = await response.json();
            chatMessages.innerHTML = '';
            messages.forEach(msg => {
              const isSender = msg.senderId === currentUser.id;
              const messageElement = createMessageElement(
                msg.content,
                isSender ? 'You' : msg.sender.firstName,
                new Date(msg.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
                isSender
              );
              chatMessages.appendChild(messageElement);
            });
            chatMessages.scrollTop = chatMessages.scrollHeight;
          } catch (error) {
            console.error('Error fetching messages:', error);
          }
        }
      });
    });
    
    function createMessageElement(content, sender, time, isSender) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `message ${isSender ? 'sent' : 'received'}`;
      
      const contentDiv = document.createElement('div');
      contentDiv.className = 'message-content';
      contentDiv.textContent = content;
      
      const infoDiv = document.createElement('div');
      infoDiv.className = 'message-info';
      infoDiv.textContent = `${sender} • ${time}`;
      
      messageDiv.appendChild(contentDiv);
      messageDiv.appendChild(infoDiv);
      
      return messageDiv;
    }
    
    function sendMessage() {
      if (!selectedUserId || !messageInput.value.trim()) return;
      const content = messageInput.value.trim();
      socket.emit('sendMessage', {
        senderId: currentUser.id,
        receiverId: selectedUserId,
        content: content
      });
      
      const messageElement = createMessageElement(
        content,
        'You',
        new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        true
      );
      chatMessages.appendChild(messageElement);
      messageInput.value = '';
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    sendButton.addEventListener('click', sendMessage);
    messageInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') sendMessage();
    });
    
    socket.on('receiveMessage', (message) => {
      if (message.senderId === selectedUserId) {
        const messageElement = createMessageElement(
          message.content,
          message.senderName,
          new Date(message.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
          false
        );
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }
    });

    socket.on('messageSent', (message) => {
      console.log('Message sent:', message);
    });
    
    socket.on('error', (error) => {
      console.error('Socket error:', error);
    });
  </script>
</body>
</html>
